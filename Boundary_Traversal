
class Solution {
public:
    bool isLeaf(Node* root){
        if(root ->left == NULL || root->right == NULL){
            return root->left == root->right;
        }
        return false;
    }
     
    void leftTraversal(Node* root, vector<int>&ans){
        if(root->left == NULL)return;
        Node* curr = root->left;
        while(curr){
            if(!isLeaf(curr))ans.push_back(curr->data);
            if(curr->left)curr = curr->left;
            else curr = curr->right;
        }
    }
    
    void bottomTraversal(Node* root, vector<int>&ans){
        if(isLeaf(root)){
            ans.push_back(root->data);
            return;
        }
        if(root->left)bottomTraversal(root->left,ans);
        if(root->right)bottomTraversal(root->right,ans);
    }
    
    void rightTraversal(Node* root, vector<int>&ans){
       if(root->right == NULL)return;
        Node* curr = root->right;
        vector<int>temp;
        while(curr){
            if(!isLeaf(curr))temp.push_back(curr->data);
            if(curr->right)curr = curr->right;
            else curr = curr->left;
             }
             
             for(int i = temp.size()-1; i >= 0; i--){
                 ans.push_back(temp[i]);
             }
    }

    

    vector<int> boundary(Node *root)
    {
        vector<int>ans;
        if(root == NULL)return ans;
        if(!isLeaf(root)) ans.push_back(root->data);
        leftTraversal(root,ans);
        bottomTraversal(root,ans);
        rightTraversal(root,ans);
        return ans;
    }
};

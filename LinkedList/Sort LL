/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
private:
   ListNode* mergeTwoLL(ListNode* head1, ListNode* head2){
        ListNode* temp1 = head1;
        ListNode* temp2 = head2;
        ListNode* dummyNode = new ListNode(-1);
        ListNode* res = dummyNode;

         while(temp1 != nullptr && temp2 != nullptr){
            if(temp1->val > temp2->val){
                dummyNode->next = temp2;
                dummyNode = dummyNode->next;
                temp2 = temp2->next;
            }
            else{
                dummyNode->next = temp1;
                dummyNode = dummyNode->next;
                temp1 = temp1->next;
            }
         }    

          if (temp1) {
        dummyNode->next = temp1;
            } else {
                dummyNode->next = temp2;
            }

         return res->next;
   }


    ListNode* findMiddle(ListNode* head){
        ListNode* fast = head->next;
        ListNode* slow = head;

        while(fast != nullptr && fast->next != nullptr){
            slow = slow->next;
            fast = fast->next->next;
        }
        return slow;
    }
public:
    ListNode* sortList(ListNode* head) {

        if(head == nullptr || head->next == nullptr)return head;

        ListNode* middle = findMiddle(head);
        ListNode* right = middle->next;
        middle->next = nullptr;
        ListNode* left = head;

        left = sortList(left);
        right = sortList(right);

        return mergeTwoLL(left,right);
    }
};

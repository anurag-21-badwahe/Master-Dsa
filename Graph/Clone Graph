/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> neighbors;
    Node() {
        val = 0;
        neighbors = vector<Node*>();
    }
    Node(int _val) {
        val = _val;
        neighbors = vector<Node*>();
    }
    Node(int _val, vector<Node*> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
};
*/

class Solution {
private:
    Node* dfs(Node* node, unordered_map<Node*, Node*>& mpp) {
        if (mpp.find(node) == mpp.end()) { // means this node is not cloned yet
            mpp[node] = new Node(node->val, {}); // Create a new node with the same value

            for (auto adj : node->neighbors) { // Traverse its neighbors
                mpp[node]->neighbors.push_back(dfs(adj, mpp)); // Recursively clone the neighbors
            }
        }
        return mpp[node]; // Return the cloned node
    }
public:
    Node* cloneGraph(Node* node) {
        if (!node) return nullptr;
        unordered_map<Node*, Node*> mpp;
        return dfs(node, mpp); // Start DFS from the given node and return the cloned graph
    }
};

private:
vector<int> topoSort(int V, vector<int> adj[]) {
    vector<int> indegree(V, 0);

    for (int i = 0; i < V; i++) {
        for (auto it : adj[i]) {
            indegree[it]++;
        }
    }

    queue<int> q;
    for (int i = 0; i < V; i++) {
        if (indegree[i] == 0) {
            q.push(i);
        }
    }

    vector<int> res;
    while (!q.empty()) {
        int front = q.front();
        res.push_back(front);
        q.pop();

        for (auto it : adj[front]) {
            indegree[it]--;
            if (indegree[it] == 0) {
                q.push(it);
            }
        }
    }

    // Check if topological sort is possible
    if (res.size() != V) {
        return {}; // Cycle detected, return empty list
    }

    return res;
}

public:
string findOrder(string dict[], int N, int K) {
    // Construct the adjacency list for the alien dictionary
    vector<int> adj[K];
    for (int i = 0; i < N - 1; i++) {
        string str1 = dict[i];
        string str2 = dict[i + 1];

        int len = min(str1.length(), str2.length());
        for (int ptr = 0; ptr < len; ptr++) {
            if (str1[ptr] != str2[ptr]) {
                adj[str1[ptr] - 'a'].push_back(str2[ptr] - 'a');
                break;
            }
        }
    }

    vector<int> res = topoSort(K, adj);
    if (res.empty()) {
        return ""; // Return empty string if there is a cycle (invalid input)
    }

    string ans = "";
    for (auto it : res) {
        ans += char(it + 'a');
    }
    return ans;
}

#include<bits/stdc++.h>
int count = 0;
void merge(vector<int> &arr, int low, int mid, int high) {
    vector<int> temp;
    int ptr1 = low;
    int ptr2 = mid + 1;

    while (ptr1 <= mid && ptr2 <= high) {
        if (arr[ptr1] <= arr[ptr2]) {
            temp.push_back(arr[ptr1]);
            ptr1++;
        } else {
            temp.push_back(arr[ptr2]);
            ptr2++;
        }
    }

    while (ptr1 <= mid) {
        temp.push_back(arr[ptr1]);
        ptr1++;
    }

    while (ptr2 <= high) {
        temp.push_back(arr[ptr2]);
        ptr2++;
    }

    for (int i = low; i <= high; i++) {
        arr[i] = temp[i - low];
    }
}

void countReversePair(vector<int> &arr, int low, int mid, int high) {
    int right = mid + 1;
    for (int i = low; i <= mid; i++) {
        while (right <= high && arr[i] > 2 * arr[right]) {
            right++;
        }
        ::count += right - (mid + 1); // Fix the counting of
                                    
                                    // reverse pairs
    }
}

void mergeSort(vector<int> &arr, int low, int high) {
    if (low >= high) return;
    int mid = low + (high - low) / 2;
    mergeSort(arr, low, mid);
    mergeSort(arr, mid + 1, high);
    countReversePair(arr, low, mid, high);
    merge(arr, low, mid, high);
}

int reversePairs(vector<int> &arr, int n) {
    ::count = 0; // Reset count before each call to reversePairs
    mergeSort(arr, 0, n - 1);
    return ::count;
}

private:
    void addSolution(vector<vector<int>>& safeBoard, vector<vector<int>>& board, int n) {
        vector<int> temp;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (board[i][j] == 1) {
                    temp.push_back(j + 1);
                }
            }
        }
        safeBoard.push_back(temp);
    }
    
    bool isSafe(vector<vector<int>>& board, int row, int col, int n) {
        int x = row, y = col;

        // Check this row on left side
        while (y >= 0) {
            if (board[row][y] == 1) return false;
            y--;
        }
        
        // Check upper diagonal on left side
        x = row, y = col;
        while (x >= 0 && y >= 0) {
            if (board[x][y] == 1) return false;
            x--;
            y--;
        }

        // Check lower diagonal on left side
        x = row, y = col;
        while (x < n && y >= 0) {
            if (board[x][y] == 1) return false;
            x++;
            y--;
        }
        
        return true;
    }
    
    void solve(int col, vector<vector<int>>& board, int n, vector<vector<int>>& safeBoard) {
        if (col == n) {
            addSolution(safeBoard, board, n);
            return;
        }
        
        for (int row = 0; row < n; row++) {
            if (isSafe(board, row, col, n)) {
                board[row][col] = 1;
                solve(col + 1, board, n, safeBoard);
                board[row][col] = 0;
            }
        }
    }

public:
    vector<vector<int>> nQueen(int n) {
        vector<vector<int>> safeBoard;
        vector<vector<int>> board(n, vector<int>(n, 0));
        solve(0, board, n, safeBoard);
        sort(safeBoard.begin(), safeBoard.end());
        return safeBoard;
    }

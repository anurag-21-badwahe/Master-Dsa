/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int preInd(vector<int>& inorder,int val){
        for(int i = 0; i < inorder.size();i++){
            if(inorder[i] == val)return i;
        }
        return NULL;
    }
    
    TreeNode* makeBst(vector<int>&preorder,int pre_st,int pre_end,vector<int>&inorder,int ind_st,int ind_end){
          if(pre_st > pre_end)return NULL;

          int pre_val = preorder[pre_st];
          int ind = preInd(inorder,pre_val);
          TreeNode* root = new TreeNode(inorder[ind]);
          int left = ind - ind_st;
          
          root->left = makeBst(preorder,pre_st+1,pre_st+left,inorder,ind_st,ind-1);
          root->right = makeBst(preorder,pre_st+left+1,pre_end,inorder,ind+1,ind_end);

          return root;
    }
    
    TreeNode* bstFromPreorder(vector<int>& preorder) {
    //    Our approach is to first convert the preordet to inorder. 
    //    \Then with the help of preorder and inorder we are going to make bst
            vector<int>inorder,hold;
            hold = preorder;
            sort(hold.begin(),hold.end());
            inorder = hold;

            return makeBst(preorder,0,preorder.size()-1,inorder,0,inorder.size()-1);

    }
};

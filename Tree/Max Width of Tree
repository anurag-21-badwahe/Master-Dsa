/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

//  solution expalination :- https://leetcode.com/problems/maximum-width-of-binary-tree/solutions/3436593/image-explanation-why-long-to-int-c-java-python/
class Solution {
public:
    int widthOfBinaryTree(TreeNode* root) {
        if(root == nullptr)return 0;
        int maxWidth = 1;
        queue<pair<TreeNode*,int>>q;
        q.push({root,0});
        while(!q.empty()){
            int size = q.size(); // we have to traverse for every node that's why we are taking size
            // we know that we have to use the indexing of the parent node
            int leftMostInd = q.front().second;
            int rightMostInd = q.back().second;

            maxWidth = max(maxWidth,rightMostInd-leftMostInd + 1);
            
            for(int i = 0; i < size; i++){
                auto node_index_pair = q.front();
                TreeNode* node = node_index_pair.first;
                int nodeInd = node_index_pair.second - leftMostInd; // to start indexing always from 0
                q.pop();
                if(node->left){
                    q.push({node->left,2LL*nodeInd});//LL is used to specify a long long integer constant. 
                }
                 if(node->right){
                   q.push({node->right,(2LL*nodeInd)+1});
                }
            }
        } 
        return maxWidth;      
    }
};

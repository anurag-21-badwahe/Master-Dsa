//Brute Force Apporch 
//T.C = o(n^2)

#include<bits/stdc++.h>
vector<int> maxSlidingWindow(vector<int> &arr, int n, int k){
    vector<int>ans;
    for(int i = 0; i <= n-k; i++){
    int maxi = arr[i];
       for(int j = i+1; j < i+k;j++){
        //    he loop condition j <= i+k is incorrect because it exceeds the bounds of the array. It should be j < i+k
             maxi = max(maxi,arr[j]);
       }
       ans.push_back(maxi);
    }
    return ans;
}


//Optimal apporch
T.c = O(n)
S.c = O(k)

#include<deque>
vector<int> maxSlidingWindow(vector<int> &arr, int n, int k){
   deque<int>dq;
   vector<int>ans;
    
    for(int i = 0; i < n; i++){
     
     //Here we are trying not to push element in increasing order
     if(!dq.empty() && dq.front() == i-k)dq.pop_front();    
         
        //Here our aim is to push element in decresing order
     while(!dq.empty() && arr[dq.back()] < arr[i]) dq.pop_back();
     
       dq.push_back(i);

        if(i >= k-1){
            ans.push_back(arr[dq.front()]);
        }
    }   
    return ans;
    
}

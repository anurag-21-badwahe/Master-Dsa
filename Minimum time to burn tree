class Solution {
  public:
   Node*  parentToNodeMapping(Node* root,int target, map<Node*,Node*> &parentToNode){
    //   if(root == NULL){
    //       return NULL;
    //   }
       
       Node* res = NULL;
       queue<Node*>q;
       q.push(root);
       parentToNode[root] = NULL;
       
       while(!q.empty()){
           Node* front = q.front();
           q.pop();
           if(front->data == target){
               res = front;
           }
           
           if(front->left){
               parentToNode[front->left] = front;
               q.push(front->left);
           }
           
           if(front->right){
               parentToNode[front->right] = front;
               q.push(front->right);
           }
           
       }
       return res;
   }
   
   int getTime(Node* tar, map<Node*,Node*> &parentToNode){
    //   if(tar == NULL)return NULL;
      int ans = 0;
       map<Node*,bool>visited;
       queue<Node*>q;
       visited[tar] = true;
       q.push(tar);
       
       while(!q.empty()){
           int size = q.size();
           bool flag = false;
           for(int i = 0; i < size; i++){
                Node* front = q.front();
                q.pop();
                
                if(front->left && !visited[front->left]){
                    visited[front->left] = true;
                    q.push(front->left);
                     flag = true;
                }
                if(front->right && !visited[front->right]){
                    visited[front->right] = true;
                    q.push(front->right);
                     flag = true;
                }
                if(parentToNode[front] && !visited[parentToNode[front]]){
                    q.push(parentToNode[front]);
                    visited[parentToNode[front]] = true;
                     flag = true;
                }
           }
            if(flag){
                ans++;
            }
       }
       return ans;
   }
   
   
  
    int minTime(Node* root, int target) 
    {
        map<Node*,Node*>parentToNode;
       Node* tar =  parentToNodeMapping(root,target,parentToNode);
       int ans = getTime(tar,parentToNode);
       return ans;
        
    }
};
